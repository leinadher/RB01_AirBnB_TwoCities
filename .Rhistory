# summary() function will output the regression coefficients for all predictors
# a) Multiple linear regression model with DV: medv, IV: lstat, age
fit <- lm(medv ~ lstat + age)
library(MASS)
plot(lstat, mevd, data = Boston)
head(Boston)
plot(Boston$age, Boston$medv)
abline(lm(Boston$medv ~ Boston$age), col="red")
fit <- lm(Boston$medv ~ Boston$age)
summary(fit)
boxplot(Boston$age, col="red")
a.1 <- 10
a.2 <- 3 * a.1
a.2
## overwriting is irreversible
a.2 <- 0
a.2
## incomplete statements (note the "plus" symbol)
2 + 4 *
(3 + 4)
## interrupting a statement (note selection)
2 + 4 *
(3 + 4)
2 + 4 *
7
## objects only exist once they were created in R
a.3 <- 17
meric vectors
## creating numeric vectors
c(2,3,15)
c(2:5)
c("Jane")
c/Jane
c(Jane)
c("Jane", "Rpdr")
c("Agatha", "Koch")
if a.1 <= a.2:
a = 2
a
vector.1 <= 20
vector.1 <- c(1, 2 ,45, 20, 123, 10, 20)
vector.1 <= 20
c(1000, 1000, 1000) + 1:6
c(10, 20, 30) + 1:6
vector.1[1]
vector.1[c(2,3,5)]
## logical operators
v.1
v.1 > 18
v.1 < 18
## creating numeric vectors
c(2,3,15)
v.1 <- c(15,23,55,10,19)
v.2 <- c(1,2,10, 10^2,      1) ## empty spaces do not matter (but not elegant)
v.3 <- c(1.1, 2.3, 7)
## alternative to c()
1:12 ## sequences can be created via ":"
## string vectors
c("Tana", "John", "Monday", "John Doe") ## strings can contain empty spaces
## logical vectors
c(TRUE, FALSE, TRUE, FALSE)
## logical operators
v.1
v.1 > 18
v.1 < 18
v.1 >= 19
v.1 <= 23
v.1 == 19
v.1 != 19
## combining logical vectors (going further)
v.4 <- 1:10
v.4
v.4 > 5
v.1[c(TRUE, FALSE, FALSE, TRUE)]
v.1[2]
v.1[c(2:4)]
v.1[c(TRUE,FALSE,FALSE,FALSE,TRUE)] ## first and last elements
## elements can be dropped
v.1[-1]
c(10, 20, 30)
A <- c(10, 20, 30)
B <- c(1, 2, 3, 4)
A*B
A == 2 |B == 3
A == 2
B == 3
A - B
library(shiny); runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/Shiny/Examples/Error_Example_01_ReactiveContext.R')
# Launching app:
shinyApp(ui = ui, server = server)
runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/day03_notes01_shiny.R')
runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/day03_notes01_shiny.R')
runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/day03_notes01_shiny.R')
runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/day03_notes01_shiny.R')
runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/day03_notes01_shiny.R')
runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/Shiny/Examples/Error_Example_01_ReactiveContext.R')
runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/Shiny/Examples/Example_01_TextInput.R')
runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/Shiny/Examples/Example_02_MultipleInputOutput_advanced.R')
runApp('HSLU/24.1 Second Semester/W.MSCIDS_RB01.H23 - R-Bootcamp/D03 Shiny and Maps/day03_notes01_shiny.R')
d.lat.long.sf <-
st_as_sf(data.frame(Latitude = c(46.18166, 46.16520),
Longitude = c(8.92637,8.96011)),
coords = c("Longitude", "Latitude"),
# Add coordinate system
crs = "+proj=lonlat")
example.map <- get_tiles(d.lat.long.sf,
provider = "OpenStreetMap")
# Working with maps. These are the relevant libraries:
library(ggplot2)
library(dplyr)
library(maptiles)
library(sf)
library(tidyterra)
d.lat.long.sf <-
st_as_sf(data.frame(Latitude = c(46.18166, 46.16520),
Longitude = c(8.92637,8.96011)),
coords = c("Longitude", "Latitude"),
# Add coordinate system
crs = "+proj=lonlat")
example.map <- get_tiles(d.lat.long.sf,
provider = "OpenStreetMap")
## Get limits
bbox.limits <- st_bbox(d.lat.long.sf)
## Plot the map
ggplot() +
## Add tiles / background map
geom_spatraster_rgb(data = example.map) +
coord_sf(xlim = bbox.limits[c(1, 3)],
ylim = bbox.limits[c(2, 4)])
46.170
## Plot map
gg.gudo +
geom_point(data = data.frame(Long = 8.94,
Lat = 46.17),
mapping = aes(x = Long, y = Lat),
size = 4)
# Save map object into variable:
gg.gudo <- ggplot() +
## Add tiles / background map
geom_spatraster_rgb(data = example.map) +
coord_sf(xlim = bbox.limits[c(1, 3)],
ylim = bbox.limits[c(2, 4)])
gg.gudo
## Plot map
gg.gudo +
geom_point(data = data.frame(Long = 8.94,
Lat = 46.17),
mapping = aes(x = Long, y = Lat),
size = 4)
## Plot map
gg.gudo +
geom_point(data = data.frame(Long = 8.94,
Lat = 46.17),
mapping = aes(x = Longitude, y = Latitude),
size = 4)
## Plot map
gg.gudo +
geom_point(data = data.frame(Long = 8.94,
Lat = 46.17),
mapping = aes(x = Long, y = Lat),
size = 4)
#### DEMOCODE for maps ####
## Load packages
library(dplyr)
library(ggplot2)
library(sf)          ## for function st_transform()
library(osmdata)
library(maptiles)    ## for get_tiles() / used instead of OpenStreetMap
library(tidyterra)   ## for geom_spatraster_rgb() - Background tiles
## osmdata::available_features() is a function that returns all possible keys
available_features()
## osmdata::available_tags() is a function that returns all possible "values"
## for a given "key".
available_tags("emergency")
# 01.02.2024
setwd("~/GitHub/RB01_AirBnB_TwoCities")
library(ggplot2)
library(ggthemes)
library(tidyr)
library(dplyr)
library(plotly)
library(RColorBrewer)
library(httr)
library(jsonlite)
library(stringr)
library(corrplot)
library(reshape2)
library(readxl)
# For maps:
library(sf)
library(ggmap)
library(leaflet)
library(osmdata)
library(maptiles)    ## for get_tiles() / used instead of OpenStreetMap
library(tidyterra)   ## for geom_spatraster_rgb() - Background tiles
theme_minimal() # So that all plots are aesthetically same
################################################################################
# LOADING CITY AIRBNB DATA
# Read listings.csv files from folder with city name, and save as data frame
# Loading 'listings.csv' files from all city folders:
file_paths <- list.files(pattern = "listings.csv$",
recursive = TRUE,
full.names = TRUE)
for (file_path in file_paths) {
# Extract city name from the file path
city_name <- sub(".*/(\\w+)/listings.csv", "\\1", file_path, perl = TRUE)
# Read CSV file and assign it to a variable with the city name
assign(city_name, read.csv(file_path))
}
################################################################################
# API CALL AND DATA MERGE
# 1. We obtain demographics data (2023_pad_mdbas_sexe.csv) via API
# 2. We merge listings.csv with demographics data
# API endpoint
api_url <- "https://opendata-ajuntament.barcelona.cat/data/api/action/datastore_search?resource_id=d0e4ec78-e274-4300-a3bc-cb85cf79014d&limit=3000"
# Sending a GET request to the API and check for success
response <- GET(api_url) %>% stop_for_status()
# Extracting content from the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
# The actual data is usually in a specific part of the JSON
# Adjust the following line according to the structure of the JSON response
demographics <- data$result$records[c("Nom_Districte", "Nom_Barri", "Valor")]
# Viewing the first few rows of the dataframe
head(demographics)
# Group by neighborhood, convert 'Valor' to numeric, and sum values
demographics_grouped <- demographics %>%
group_by(Nom_Barri) %>%
mutate(Valor = as.numeric(Valor)) %>%  # Convert 'Valor' column to numeric
summarise(Total_Population = sum(Valor))
# Merge the datasets
Barcelona_md <- left_join(Barcelona, demographics_grouped, by =
c("neighbourhood" = "Nom_Barri"))
################################################################################
# EXTRACT STAR-RATING FROM NAME, AND ADD AS COLUMN TO DATA FRAME
extract_star_rating <- function(name) {
matches <- str_extract(name, "★([0-9.]+)")
as.numeric(gsub("★", "", matches))
}
Barcelona_md$star_rating <- sapply(Barcelona_md$name, extract_star_rating)
head(Barcelona_md[c("name", "star_rating")], 5)
################################################################################
# EXTRACT LICENSE STATUS
# Save to a new column 'LicenseGrouping'
Barcelona_md <- Barcelona_md %>%
mutate(LicenseGrouping = case_when(
grepl("Exempt", license, ignore.case = TRUE) ~ "Exempt",
license != "" & !is.na(license) ~ "License is displayed",
TRUE ~ "License is not displayed"
))
print(Barcelona_md)
################################################################################
# GROUP LARGE TENANTS AND SMALL TENANTS
Barcelona_md <- Barcelona_md %>%
mutate(TenantSizeGrouping = case_when(
calculated_host_listings_count >= 10 ~ "Large tenant",
calculated_host_listings_count <= 9 ~ "Small tenant",
TRUE ~ NA_character_ # This handles any unexpected cases, such as missing values
))
# View the first few rows of the transformed dataset to verify the changes
head(Barcelona_md)
################################################################################
# PLOT1: FREQUENCY OF EACH ROOM TYPE
# Summarize the data to count the number of each property type
property_counts <- Barcelona_md %>%
group_by(room_type) %>%
summarise(quantity = n())
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Room Type",
y = "Count",
title = "Count of each room type",
subtitle = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
################################################################################
# PLOT2: CORRELATION PLOT
numeric_data <- Barcelona_md[, sapply(Barcelona_md, is.numeric)]
numeric_data <- numeric_data[, !colnames(numeric_data) %in% c('id',
'latitude',
'longitude',
'number_of_reviews_ltm')]
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs")
corrplot(cor_matrix, type = "full", tl.col = "black",
title = "Correlation of Numerical Values",
subtitle = "Barcelona",
tl.srt = 45, # Rotate text labels 45 degrees
mar = c(0, 0, 2, 0), # Adjust margins to make room for rotated labels
tl.cex = 0.8, # Adjust text label size
pch = 15) # Use full squares (ASCII 15)
################################################################################
# PLOT3: LICENSE STATUS
license_count <- Barcelona_md %>%
group_by(LicenseGrouping) %>%
summarise(quantity = n())
# Create the bar plot
ggplot(license_count,
aes(x = reorder(LicenseGrouping, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "",
y = "Count",
title = "License status",
subtitle = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
################################################################################
# PLOT 4: GREAT AND SMALL TENANTS
tenant_count <- Barcelona_md %>%
group_by(TenantSizeGrouping) %>%
summarise(quantity = n())
# Create the bar plot
ggplot(tenant_count,
aes(x = reorder(TenantSizeGrouping, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "",
y = "Count",
title = "Types of Tenant",
subtitle = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
################################################################################
# PLOT 5: ROOM TYPE BY NEIGHBOURHOOD
ggplot(Barcelona_md, aes(x = neighbourhood_group)) +
geom_bar(aes(fill = room_type), position = "dodge") +
facet_wrap(~ room_type, scales = "free_y", nrow = 2) +
theme_minimal() +
labs(title = "Type of Accommodation per Neighbourhood",
subtitle = "Barcelona",
x = "Neighbourhood Group",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
################################################################################
# PLOT6: AVERAGE PRICES BY NEIGHBOURHOOD, MAP
# Import geojson and convert to data frame:
Barcelona_geo <- st_read("Data/Barcelona/neighbourhoods.geojson")
Barcelona_geo <- st_make_valid(Barcelona_geo)
print(Barcelona_geo)
merged_data <- merge(Barcelona_geo, Barcelona_md, by = "neighbourhood", all.x = TRUE)
# Calculate the mean price for each neighborhood
mean_price_by_neighbourhood <- aggregate(price ~ neighbourhood, merged_data, mean)
merged_data <- merge(merged_data, mean_price_by_neighbourhood, by = "neighbourhood")
ggplot(merged_data) +
geom_sf(aes(fill = price.y, label = neighbourhood)) +
scale_fill_viridis_c() +
labs(title = "Average Price by Neighbourhood")
# Display with background!
################################################################################
# PLOT 7: LISTINGS BY MINIMUM NIGHTS
# Modify the minimum_nights column to create a '35+' category
Barcelona_md$minimum_nights_grouped <- ifelse(Barcelona_md$minimum_nights > 35,
"35+",
as.character(Barcelona_md$minimum_nights))
# Convert the column to a factor to control the order in the plot
Barcelona_md$minimum_nights_grouped <- factor(Barcelona_md$minimum_nights_grouped,
levels = c(as.character(1:35),
"35+"))
# Create the histogram
ggplot(Barcelona_md, aes(x = minimum_nights_grouped)) +
geom_bar(fill = "darkgrey") +
labs(x = "Minimum Nights",
y = "Count",
title = "Distribution of Listings by Minimum Nights",
subtitle = "Barcelona") +
theme(axis.text.x = element_text(angle = 0,
vjust = 0.5,
hjust = 1))
################################################################################
# PLOT 8: LISTINGS BY HOST
listings_per_host <- Barcelona_md %>%
group_by(host_id) %>%
summarize(count = n()) %>%
ungroup()
# Group all counts of 10 or more into '10+'
listings_per_host$count_grouped <- ifelse(listings_per_host$count > 10,
"10+",
as.character(listings_per_host$count))
# Convert the column to a factor to control the order in the plot
listings_per_host$count_grouped <- factor(listings_per_host$count_grouped,
levels = c(as.character(1:10),
"10+"))
# Create the histogram
ggplot(listings_per_host, aes(x = count_grouped)) +
geom_bar(fill = "darkgrey") +
labs(x = "Listings per Host",
y = "Number of Listings",
title = "Distribution of Listings per Host",
subtitle = "Barcelona") +
theme(axis.text.x = element_text()) +
theme_minimal()
# 10+ is WRONG!
################################################################################
# PLOT 9: JITTER + VIOLIN PLOT PRICE BY NEIGHBOURHOOD
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2,
alpha = 0.25) +
geom_violin(fill = NA) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
################################################################################
# PLOT 10: SCATTERPLOT PRICE BY RATING
ggplot(Barcelona_md, aes(x = star_rating, y = price)) +
geom_point(width = 0.2,
alpha = 0.25) + # Plot the points
geom_smooth(method = "lm", color = "red") + # Add linear model line
labs(title = "Scatter Chart of Star Rating vs. Price with Linear Model",
subtitle = "Barcelona",
x = "Star Rating",
y = "Price") +
theme_minimal()
################################################################################
# PLOT 11: BOXPLOTS BY PRICE
ggplot(Barcelona_md, aes(x = neighbourhood_group, y = price)) +
geom_boxplot(fill = "lightblue") +
scale_y_log10() +
labs(title = "Price by Neighbourhood",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
################################################################################
# PLOT 12: BOXPLOTS BY MINIMUM NIGHTS
ggplot(Barcelona_md, aes(x = neighbourhood_group, y = minimum_nights)) +
geom_boxplot(fill = "lightgreen") +
scale_y_log10() + # Otherwise boxplot conveys no information
labs(title = "Minimum Nights by Neighbourhood",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Minimum Number of Nights") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
################################################################################
# PLOT 13: BOXPLOTS BY NUMBER OF REVIEWS
# Hay que ajustar el yscale, o eliminar los outliers. Si no, el plot es plano!
ggplot(Barcelona_md, aes(x = neighbourhood_group, y = number_of_reviews)) +
geom_boxplot(fill = "lightsalmon") +
coord_cartesian(ylim = c(0, 200)) +
labs(title = "Number of Reviews by Neighbourhood",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Number of Reviews") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
################################################################################
# PLOT 14: TOP 5 HOSTS BY NUMBER OF LISTINGS
top_hosts <- Barcelona_md %>%
distinct(host_name, .keep_all = TRUE) %>%
arrange(desc(calculated_host_listings_count)) %>%
slice_head(n = 5)
# Create the ggplot2 horizontal barplot
ggplot(top_hosts, aes(x = reorder(host_name, calculated_host_listings_count),
y = calculated_host_listings_count)) +
geom_bar(stat = "identity",
fill = "skyblue", alpha = 0.8) +
geom_text(aes(label = calculated_host_listings_count),
hjust = 2,
color = "black",
size = 3) +
labs(title = "Top 5 Hosts by Number of Listings",
subtitle = "Barcelona",
x = "",
y = "Listing Count") +
coord_flip() + # Flip the plot to horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
panel.grid.major.x = element_line(color = "gray"),
panel.grid.minor.x = element_line(color = "gray")
)
# PLOT 8: LISTINGS BY HOST
listings_per_host <- Barcelona_md %>%
group_by(host_id) %>%
summarize(count = n()) %>%
ungroup()
# Group all counts of 10 or more into '10+'
listings_per_host$count_grouped <- ifelse(listings_per_host$count > 10,
"10+",
as.character(listings_per_host$count))
# Convert the column to a factor to control the order in the plot
listings_per_host$count_grouped <- factor(listings_per_host$count_grouped,
levels = c(as.character(1:10),
"10+"))
# Create the histogram
ggplot(listings_per_host, aes(x = count_grouped)) +
geom_bar(fill = "darkgrey") +
labs(x = "Listings per Host",
y = "Number of Listings",
title = "Distribution of Listings per Host",
subtitle = "Barcelona") +
theme(axis.text.x = element_text()) +
theme_minimal()
# Create the histogram
ggplot(listings_per_host, aes(x = count_grouped)) +
geom_bar(fill = "darkgrey") +
labs(x = "Listings per Host",
y = "Number of Hosts",
title = "Distribution of Listings per Host",
subtitle = "Barcelona") +
theme(axis.text.x = element_text()) +
theme_minimal()
