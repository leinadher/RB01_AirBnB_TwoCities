fill = room_type)) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() # Flip the plot to horizontal bars
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = room_type)) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() # Flip the plot to horizontal bars
y = quantity) +
labs(x = "Property Type",
title = "Available quantities of each property type") +
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = "blue")) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() # Flip the plot to horizontal bars
fill = "blue"")) +
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = "red")) +
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'blue')) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() # Flip the plot to horizontal bars
theme_base() # So that all plots are aesthetically same
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'blue')) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() # Flip the plot to horizontal bars
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity)) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() # Flip the plot to horizontal bars
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
color = "red")) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() # Flip the plot to horizontal bars
,
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'blue')) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() # Flip the plot to horizontal bars
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() # Flip the plot to horizontal bars
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type",
sub = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type",
sub = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type",
sub = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Property Type",
y = "Quantity",
title = "Available quantities of each property type",
subtitle = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Room Type",
y = "Frequency",
title = "Frequency of each room type",
subtitle = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_violin() +
geom_jitter(width = 0.2, alpha = 0.25) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Structure of data:
str(Barcelona)
head(merged_data)
barplot(table(Barcelona$room_type),
main = "Barcelona",
xlab = "Room Type",
ylab = "Frequency",
col = gradientBCN(4))
barplot(table(Zurich$room_type),
main = "Zurich",
xlab = "Room Type",
ylab = "Frequency",
col = gradientZH(4))
barplot(table(Barcelona$room_type),
main = "Barcelona",
xlab = "Room Type",
ylab = "Frequency",
col = gradientBCN(4))
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Room Type",
y = "Frequency",
title = "Frequency of each room type",
subtitle = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
# Use the color palette for each neighbourhood group
boxplot(Barcelona$price ~ Barcelona$neighbourhood_group,
outline = FALSE,
main = "Barcelona - Price per Neighbourhood",
xlab = "Neighbourhood group",
ylab = "Euro",
col = gradientBCN(length(unique_neighbourhoods)))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_violin() +
geom_jitter(width = 0.2, alpha = 0.25) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2, alpha = 0.25) +
geom_violin() +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2, alpha = 0.25) +
geom_violin(alpha = 0.25) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2, alpha = 0.25) +
geom_violin(fill = NA,
alpha = 0.25) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2, alpha = 0.25, fill = "red") +
geom_violin(fill = NA) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2, alpha = 0.25, color = "red") +
geom_violin(fill = NA) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2,
alpha = 0.25,
fill = Barcelona$neighbourhood_group) +
geom_violin(fill = NA) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2,
alpha = 0.25,
fill = Barcelona$neighbourhood_group) +
geom_violin(fill = NA) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2,
alpha = 0.25,
fill = Barcelona$price) +
geom_violin(fill = NA) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2,
alpha = 0.25,
fill = Barcelona$neighbourhood_group) +
geom_violin(fill = NA) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Barcelona, aes(x = neighbourhood_group, y = price)) +
geom_jitter(width = 0.2,
alpha = 0.25,
fill = Barcelona$price) +
geom_violin(fill = NA) +
scale_y_log10() +
labs(title = "Neighbourhood vs Price",
subtitle = "Barcelona",
x = "Neighbourhood",
y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "Room Type",
y = "Frequency",
title = "Frequency of each room type",
subtitle = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
dim(demographics)
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
# API endpoint
api_url <- "https://opendata-ajuntament.barcelona.cat/data/api/action/
datastore_search?resource_id=d0e4ec78-e274-4300-a3bc-cb85cf79014d&limit=50000"
# Sending a GET request to the API
response <- GET(api_url)
library(httr)
library(jsonlite)
# API endpoint
api_url <- "https://opendata-ajuntament.barcelona.cat/data/api/action/
datastore_search?resource_id=d0e4ec78-e274-4300-a3bc-cb85cf79014d&limit=50000"
# Sending a GET request to the API
response <- GET(api_url)
# API endpoint
api_url <- "https://opendata-ajuntament.barcelona.cat/data/api/action/datastore_search?resource_id=d0e4ec78-e274-4300-a3bc-cb85cf79014d&limit=50000"
# Sending a GET request to the API
response <- GET(api_url)
# Checking if the request was successful
if (http_status(response)$category == "success") {
# Extracting content from the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
# The actual data is usually in a specific part of the JSON
# Adjust the following line according to the structure of the JSON response
demographics <- data$result$records[c("Valor", "Nom_Barri")]
# Viewing the first few rows of the dataframe
head(demographics)
} else {
print(paste("Request failed with status", http_status(response)$reason))
dim(demographics)
}
setwd("~/GitHub/RB01_AirBnB_TwoCities")
library(ggplot2)
library(ggthemes)
library(tidyr)
library(dplyr)
library(plotly)
library(RColorBrewer)
library(httr)
library(jsonlite)
theme_minimal() # So that all plots are aesthetically same
# Loading 'listings.csv' files from all city folders:
file_paths <- list.files(pattern = "listings.csv$",
recursive = TRUE,
full.names = TRUE)
for (file_path in file_paths) {
# Extract city name from the file path
city_name <- sub(".*/(\\w+)/listings.csv", "\\1", file_path, perl = TRUE)
# Read CSV file and assign it to a variable with the city name
assign(city_name, read.csv(file_path))
}
# API endpoint
api_url <- "https://opendata-ajuntament.barcelona.cat/data/api/action/datastore_search?resource_id=d0e4ec78-e274-4300-a3bc-cb85cf79014d&limit=50000"
# Sending a GET request to the API
response <- GET(api_url)
# Checking if the request was successful
if (http_status(response)$category == "success") {
# Extracting content from the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
# The actual data is usually in a specific part of the JSON
# Adjust the following line according to the structure of the JSON response
demographics <- data$result$records[c("Valor", "Nom_Barri")]
# Viewing the first few rows of the dataframe
head(demographics)
} else {
print(paste("Request failed with status", http_status(response)$reason))
dim(demographics)
}
# The actual data is usually in a specific part of the JSON
# Adjust the following line according to the structure of the JSON response
demographics <- data$result$records
# API endpoint
api_url <- "https://opendata-ajuntament.barcelona.cat/data/api/action/datastore_search?resource_id=d0e4ec78-e274-4300-a3bc-cb85cf79014d&limit=50000"
# Sending a GET request to the API
response <- GET(api_url)
# Checking if the request was successful
if (http_status(response)$category == "success") {
# Extracting content from the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
# Extracting the data and selecting only 'Valor' and 'Nom_Barri' columns
dataframe <- data$result$records[c("Valor", "Nom_Barri")]
# Viewing the first few rows of the dataframe
head(dataframe)
} else {
print(paste("Request failed with status", http_status(response)$reason))
}
# Extracting the data and selecting only 'Valor' and 'Nom_Barri' columns
dataframe <- data$result$records
# Viewing the first few rows of the dataframe
head(dataframe)
# Checking if the request was successful
if (http_status(response)$category == "success") {
# Extracting content from the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
# Extracting the data and selecting only 'Valor' and 'Nom_Barri' columns
dataframe <- data$result$records
# Viewing the first few rows of the dataframe
head(dataframe)
} else {
print(paste("Request failed with status", http_status(response)$reason))
}
install.packages("httr")
install.packages("httr")
library(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
library(httr)
library(jsonlite)
# API endpoint
api_url <- "https://opendata-ajuntament.barcelona.cat/data/api/action/datastore_search?resource_id=d0e4ec78-e274-4300-a3bc-cb85cf79014d&limit=50000"
# Sending a GET request to the API
response <- GET(api_url)
# Checking if the request was successful
if (http_status(response)$category == "success") {
# Extracting content from the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
# The actual data is usually in a specific part of the JSON
# Adjust the following line according to the structure of the JSON response
dataframe <- data$result$records
# Viewing the first few rows of the dataframe
head(dataframe)
} else {
print(paste("Request failed with status", http_status(response)$reason))
dim(dataframe)
}
# Sending a GET request to the API
response <- GET(api_url)
# API endpoint
api_url <- "https://opendata-ajuntament.barcelona.cat/data/api/action/datastore_search?resource_id=d0e4ec78-e274-4300-a3bc-cb85cf79014d&limit=50000"
# Sending a GET request to the API
response <- GET(api_url)
# Checking if the request was successful
if (http_status(response)$status == 200) {
# Extracting content from the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
# Adjust this line based on the structure of your JSON response
dataframe <- data$result$records
# Viewing the first few rows of the dataframe
head(dataframe)
} else {
print(paste("Request failed with status", http_status(response)$reason))
}
# API endpoint
api_url <- "https://opendata-ajuntament.barcelona.cat/data/api/action/datastore_search?resource_id=d0e4ec78-e274-4300-a3bc-cb85cf79014d&limit=50000"
# Sending a GET request to the API
response <- GET(api_url)
# Checking if the request was successful
if (http_status(response)$category == "success") {
# Extracting content from the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
# The actual data is usually in a specific part of the JSON
# Adjust the following line according to the structure of the JSON response
dataframe <- data$result$records
# Viewing the first few rows of the dataframe
head(dataframe)
} else {
print(paste("Request failed with status", http_status(response)$reason))
dim(dataframe)
}
